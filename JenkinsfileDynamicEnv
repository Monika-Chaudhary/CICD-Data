@Library('DevOpsSharedLib')_

//get UCD EnvName
def getEnvironmentName(deployEnvName){
    if(deployEnvName=="envNameA" || deployEnvName=="envNameB"){
        environment="envName1"
    }
    else if(deployEnvName=="envNameC" || deployEnvName=="envNameD"){
        environment="envName2"
    }else{
        echo "Wrong Environment"
    }
    return environment
}

//deploy build artifacts in all envs automatically
def getRegionsToDeploy(DeployEnvironmentlist){
    return DeployEnvironmentlist.split(',')
}

def getDeployStages(DeployEnvironmentlist, earName, warName, UCDProcess, To, CC, Subject, appName, build_status, version_id, Deploy_status, deployRegion, auth){
    return getRegionsToDeploy(DeployEnvironmentlist).collectEntries { region ->
        [
            (region): {
                regionEnv="${region}".split(";")[0]
                stage("Deploy region ${regionEnv}"){
                    def deployenvRegion=""
                    try{
                        echo "${region}"
                        deployenvRegion="${region}".split(";")[0]
                        approvalMap=input(id: "${deployenvRegion}", message: "Please provide approval for deployment in ${deployenvRegion} region", ok: 'Deploy')
                        stage_step="${STAGE_NAME}"
                        
                        //separate comp, appProcess, buildFileName and smokeAppProcess
                        def comp_name=region.split(";")[1]
                        def applicationProcess=region.split(";")[2]
                        def buildFileName=region.split(";")[3]
                        def smokeAppProcess=region.split(";")[4]
                        
                        version_id=sh(script:"echo 'AppName${buildFileName}.${BUILD_NUMBER}.${CUR_DATE}'",returnStdout: true).trim()
                        
                        deployRegion=getEnvironmentName(deployenvRegion) //get exact ucd env name
                        
                        echo "Going to call Deploy shared function to deploy artifact in environment ${deployenvRegion}"
                        deployFun(comp_name, applicationProcess, buildFileName, deployRegion, auth, warName, earName)
                        
                        echo "Going to call SmokeTest shared function to deploy artifact in environment ${deployenvRegion}"
                        smokeFun(comp_name, smokeAppProcess, auth, deployRegion, version_id)
                    }catch(Exception e){
                        catchBlock(To, CC, Subject, appName, stage_step, e, deployenvRegion, UCDProcess, Deploy_status)
                    }
                }
            }
        ]
    }
}

def catchBlock(String To, String CC, String Subject, String appName, String stage_step, Exception e, String DeploymentEnvironment, String UCDProcess, String Deploy_status){
    Approver=BUILD_USER_ID
    echo e.toString()
  if(e.toString()=="org.jenkinsci.plugins.workflow.steps.FlowInterruptedException" || UCDProcess=="SUCCESS"){
    echo "${Approver} has aborted in ${DeploymentEnvironment}"
    Deploy_status="ABORTED"
    Subject="Deployment Aborted : ${JOB_Name} #${BUILD_NUMBER} ${DeploymentEnvironment}"
    echo "${DeploymentEnvironment} deploy status : Aborted"
    EmailFunction(To, CC, Subject, appName, stage_step, Deploy_status, DeploymentEnvironment)
  }else if(e.toString()=="org.jenkinsci.plugins.workflow.steps.FlowInterruptedException" || UCDProcess=="FAILURE"){
    Deploy_status="FAILURE"
    Subject="Deployment FAILURE : ${JOB_Name} #${BUILD_NUMBER} ${DeploymentEnvironment}"
    echo "${DeploymentEnvironment} deploy status : Failed, current user is ${Approver}"
    echo "Failed at '${stage_step}' step, ${e}...exiting now..."
    EmailFunction(To, CC, Subject, appName, stage_step, Deploy_status, DeploymentEnvironment)
  }else{
    Deploy_status="FAILURE"
    Subject="Deployment FAILURE : ${JOB_Name} #${BUILD_NUMBER} ${DeploymentEnvironment}"
    echo "${DeploymentEnvironment} deploy status : Failed, current user is ${Approver}"
    echo "Failed at '${stage_step}' step, ${e}...exiting now..."
    EmailFunction(To, CC, Subject, appName, stage_step, Deploy_status, DeploymentEnvironment)
  }
  throw e
}

node{
    def appNme="appName"
    CUR_DATE=sh(script:'(date +"%d-%m-%y")',returnStdout: true).trim()
    def DISTINGUISHER="appName"
    def version_id=""
    def auth=""
    def To=""
    def CC=""
    def Subject=""
    def receipient=""
    def build_status="SUCCESS"
    def Deploy_status="SUCCESS"
    def Approver=BUILD_USER_ID
    def EnvironmentList=[]
    def DeployEnvironmentlist=""
    def DefaultDeployEnvironment=""
    def Manual_Testing="" 
    def Automated_Testing=""
    def comp_name=""
    def envName=""
    def UCDProcess=""
    def applicationProcess=""
    def earName=""
    def warName=""
    def folderName=""
    def defaultEnvironment=""
    def smokeAppProcess=""
    def wasSysOutLog=""
    def wasSysOutLogJ2=""
    def wasSysOutLogJ3=""
    def wasSysOutLogJ4=""
    def appTimerLog=""
    def envLog=""
    def repositoryUrlInfo="" 
    def branchInfo="" 
    def file_pathinfo=""
    def deployRegion=""
    def sqlCount=0
    def dbServiceAccount=""
    def dbHost="" 
    def dbPort="" 
    def dbServiceName="" 
    def dbApplicationProcess=""
    def sqlFlag="No"
    def ucdApplicationName=""
    def buildArtifactId=""
    def SonarQualityGate=""
    
    stage("Checkout SCM"){
        try{
            checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/branchNameWhereJenkinsfile']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'WipeWorspace']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'credentials', refspec: '+refs/heads/branchNameWhereJenkinsfile:refs/remotes/origin/branchNameWhereJenkinsfile', url: 'sshUrlWhereJenkinsAndTxtRepo']]])
              
            def githubRepoURL =sh(returnStdout:true, script: """
                source \$WORKSPACE/xyztxtFile.txt
                echo "\$repositoryURL"
                """
            )
            githubRepoURL = githubRepoURL.trim()
            println(githubRepoURL)

            def branchToPull =sh(returnStdout:true, script: """
                source \$WORKSPACE/xyztxtFile.txt
                echo "\$branch"
                """
            )
            branchToPull = branchToPull.trim()
            println(branchToPull)

            def branchName = "refs/heads" + branchToPull

            def branchRefSpec = "refs/heads" + branchToPull + ":refs/remotes/origin" + branchToPull                                

            def credentialsId_App =sh(returnStdout:true, script: """
                source \$WORKSPACE/xyztxtFile.txt
                echo "\$credentialsId_App"
                """
            )
            credentialsId_App = credentialsId_App.trim()
            println(credentialsId_App)
              
            def Environment =sh(returnStdout:true, script: """
                source \$WORKSPACE/xyztxtFile.txt
                echo "\$Deployment_Environment"
                """
            )

            Manual_Testing =sh(returnStdout:true, script: """
                source \$WORKSPACE/xyztxtFile.txt
                echo "\$Manual_Testing"
                """
            )

            Automated_Testing =sh(returnStdout:true, script: """
                source \$WORKSPACE/xyztxtFile.txt
                echo "\$Automated_Testing"
                """
            )

            auth =sh(returnStdout:true, script: """
                source \$WORKSPACE/xyztxtFile.txt
                echo "\$authUCDToken"
                """
            )
            auth = auth.trim()
            println(auth)
            
            To=sh(returnStdout:true, script: """
                source \$WORKSPACE/xyztxtFile.txt
                echo "\$emailTo"
                """
            )
            To = To.trim()
            println(To)
            
            receipient=sh(returnStdout:true, script: """
                source \$WORKSPACE/xyztxtFile.txt
                echo "\$approverRecipient"
                """
            )
            receipient = receipient.trim()
            println(receipient)

            //get repositoryUrlInfo, branchInfo, file_pathinfo, dbServiceAccount, dbHost, dbPort, dbServiceName, dbApplicationProcess, ucdApplicationName and SonarQualityGate in same way
            
            //code to separate default env and others deployments env
            for(int i=0;i<Environment.split(",").length;i++){
                if(i==0){
                    DefaultDeployEnvironment=Environment.split(",")[i]
                }
                else{
                    DefaultEnvironmentlist=DefaultEnvironmentlist + Environment.split(",")[i] + ","
                }
            }
            
            echo "Default Deployment Environment: ${DefaultDeployEnvironment}"
            echo "Rest of deployment environment: ${DefaultEnvironmentlist}"
            
            //remove extra comma from extracted deployment string
            if (DefaultEnvironmentlist!=""){
                DefaultEnvironmentlist=DeployEnvironmentlist.substring(0,DefaultEnvironmentlist.length() -1)
            }
            
            //code to separate default env, comp, appProcess and smokeAppProcess
            for(int i=0; i< DefaultDeployEnvironment.split(";").length();i++){
                if(i==0){
                    defaultEnvironment=DefaultDeployEnvironment.split(";")[i]
                }
                else if(i==1){
                    comp_name=DefaultDeployEnvironment.split(";")[i]
                }
                else if(i==2){
                    applicationProcess=DefaultDeployEnvironment.split(";")[i]
                }
                else if(i==3){
                    buildFileName=DefaultDeployEnvironment.split(";")[i]
                }
                else if(i==4){
                    smokeAppProcess=DefaultDeployEnvironment.split(";")[i]
                }
                else{
                    echo "Empty List or Invalid Data"
                }
            }

            //echo defaultEnvironment, comp_name, applicationProcess, buildFileName and smokeAppProcess for debug purpose
              
            checkout([$class: 'GitSCM', branches: [[name: branchName]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'WipeWorspace']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: credentialsId_App, refspec: branchRefSpec, url: githubRepoURL]]])
              
        }catch(Exception e){
            Subject="Build Failure : ${JOB_Name} #${BUILD_NUMBER}"  
            build_status="FAILURE"
            echo "${stage_step}"
            EmailFunction(To, CC, Subject, appName, stage_step, build_status, envName)
            error "Failed at 'Checkout SCM', exiting now..."
        }
    }
    
    stage('SAST Analysis with SonarQube'){
        stage_step="${STAGE_NAME}"
        try{
            withSonarQubeEnv('SonarQube'){
                withCredentials([string(credentialsId: 'credentialsId', variable: 'sonarpass')]) {
                    echo "SonarQualityGate-> $SonarQualityGate"
                    sh '''
                    export SonarQualityGate='''+SonarQualityGate+'''
                    export sonarpass='''+sonarpass+'''

                    if [ "${SonarQualityGate}" == "enable" ]; then
                        echo "Sonar Quality Gate Enabled"
                        /sonarScannerPath/bin/sonar-scanner -e -Dsonar.host.url=sonarQubeIPAddr -Dsonar.login="$sonarpass" -Dsonar.projectName='sonarProjectName' -Dsonar.projectVersion=1.0 -Dsonar.language=java -Dsonar.projectKey=sonarProjectKey -Dsonar.sources=$WORKSPACE/src -Dsonar.java.binaries=$WORKSPACE/ -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=300"  // pathTo/sonar-scanner-version/bin/sonar-scanner
                      //-Dsonar.java.binaries=$WORKSPACE/WebContent/WEB-INF/lib
                    elif [ "${SonarQualityGate}" == "disable" ]; then
                        echo "Sonar Quality Gate disabled"
                        /sonarScannerPath/bin/sonar-scanner -e -Dsonar.host.url=sonarQubeIPAddr -Dsonar.login="$sonarpass" -Dsonar.projectName='sonarProjectName' -Dsonar.projectVersion=1.0 -Dsonar.language=java -Dsonar.projectKey=sonarProjectKey -Dsonar.sources=$WORKSPACE/src -Dsonar.java.binaries=$WORKSPACE/
                    else
                        echo "Value must be either enable or disable"
                    fi
                    '''
                }  
            }
        }catch(Exception e){
            Subject="Build Failure : ${JOB_Name} #${BUILD_NUMBER}"  
            build_status="FAILURE"
            echo "${stage_step}"
            EmailFunction(To, CC, Subject, appName, stage_step, build_status, envName)
            error "Failed at 'SAST Analysis with SonarQube', exiting now..."
        }
    } 
    
    stage('JUnit Testing'){
        stage_step="${STAGE_NAME}"
        try{
            withEnv(['JAVA_HOME=pathToJDK']) {
               sh '$JAVA_HOME/bin/java -version'
               sh 'antPath -f $WORKSPACE/jacoco-build.xml'

               junit skipPublishingChecks: true, testResults: '**/build/targetFolder/test-reports/*.xml'
               publishCoverage adapters: [jacocoAdapter('build/targetFolder/site/jacoco/report.xml')], checksName: '', skipPublishingChecks: true, sourceFileResolver: sourceFiles('NEVER_STORE')
             }
                withSonarQubeEnv('SonarQube'){
                    withCredentials([string(credentialsId: 'credentialsId', variable: 'sonarpass')]) {
                        sh "sonarScannerPath/bin/sonar-scanner -e -Dsonar.host.url=IPAddr -Dsonar.login='$sonarpass' -Dsonar.projectName='sonarProjectName' -Dsonar.projectVersion=1.0 -Dsonar.language=java -Dsonar.projectKey=sonarProjectKey -Dsonar.sources=$WORKSPACE/src -Dsonar.java.binaries=$WORKSPACE/ -Dsonar.tests=$WORKSPACE/test/ -Dsonar.java.test.libraries=$WORKSPACE/jacoco/lib -Dsonar.core.codeCoveragePlugin=jacoco -Dsonar.junit.reportPaths=$WORKSPACE/build/targetFolder/test-reports -Dsonar.coverage.jacoco.xmlReportPaths=$WORKSPACE/build/targetFolder/site/jacoco/report.xml"  // pathTo/sonar-scanner-version/bin/sonar-scanner
                        //-Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=300 these : 2 lines conditions if quality gate failed then will make pipeline failed too
                    }
                }  
           
        }catch(Exception e){
            Subject="Build Failure : ${JOB_Name} #${BUILD_NUMBER}"  
            build_status="FAILURE"
            echo "${stage_step}"
            EmailFunction(To, CC, Subject, appName, stage_step, build_status, envName)
            error "Failed at 'JUnit Testing', exiting now..."
        }
    } 
    
    stage('Compile and Build EAR'){
        stage_step="${STAGE_NAME}"
        try{
            withEnv(['JAVA_HOME=pathToJDK']) {
                sh '''
                /antPath/bin/ant -f $WORKSPACE/build.xml
                '''

                //Check DB Scripts present or not, if present then add to BuildFolder
                sqlCount=sh(script:'(ls $WORKSPACE/DB_scriptsFolder/*.sql | wc -l)',returnStdout: true)
                echo "Count of SQL files in workspace: ${sqlCount}"
                if( "${sqlCount}".toInteger() == 0 ){
                    echo "No SQL file present"
                }else if( "${sqlCount}".toInteger() > 0 ){
                    sh'''
                    mkdir -p $WORKSPACE/build/target-EAR/DB_scriptsFolder
                    cp $WORKSPACE/DB_scriptsFolder/*.sql $WORKSPACE/build/target-EAR/DB_scriptsFolder
                    '''
                    sqlFlag="Yes"
                }
            }
        }catch(Exception e){
            Subject="Build Failure : ${JOB_Name} #${BUILD_NUMBER}"  
            build_status="FAILURE"
            echo "${stage_step}"
            EmailFunction(To, CC, Subject, appName, stage_step, build_status, envName)
            error "Failed at 'Compile and Build EAR', exiting now..."
        }
    }
    
    stage('Nexus Upload of Ear Artifact'){
        stage_step="${STAGE_NAME}"
        try{
            withCredentials([string(credentialsId: 'credentialsId', variable: 'nexus')]) {
               buildArtifactId="${BUILD_NUMBER}.${CUR_DATE}"
               sh '''
               CUR_DATE=$(date +"%d-%m-%y")
               DISTINGUISHER=appName
               version_id=${DISTINGUISHER}.${BUILD_NUMBER}.${CUR_DATE}
               packName='''+buildArtifactId+'''
               dir_to_fetch=$WORKSPACE/build/target-EAR/
               mkdir -p $WORKSPACE/${version_id}
               if[ ! -d $dir_to_fetch ]; then
                    echo "$dir_to_fetch is not valid directory, Exiting"
                    exit 1
               fi
               cd $dir_to_fetch
               cnt=`ls -1 *.ear | wc -l`
               if [ $cnt -ls 1 ]; then
                    echo "Directory is empty. Nothing to upload, Exiting"
                    exit 1
               fi
               ls -1 | while read filename
               do
                    cp -rf ${dir_to_fetch}/${filename} $WORKSPACE/${version_id}
               done
               zip -r ${version_id}.zip *
               chmod 777 ${version_id}.zip
               curl -v -u admin:${nexus} http://nexusIpAddr/nexus/content/repositories/repoAppName/${packName} -T ${version_id}.zip    
               echo "Uploaded ${version_id}.zip to Nexus"
               '''
            }
        }catch(Exception e){
            Subject="Build Failure : ${JOB_Name} #${BUILD_NUMBER}"  
            build_status="FAILURE"
            echo "${stage_step}"
            EmailFunction(To, CC, Subject, appName, stage_step, build_status, envName)
            error "Failed at 'Nexus Upload of Ear Artifact', exiting now..."
        }
    }

    defaultDeployStatus="false"
    stage("Default artifact in ${defaultEnvironment}"){
        try{
            stage_step="${STAGE_NAME}"
            UCDProcess="SUCCESS"    
            echo "Default env to deploy code : ${defaultEnvironment}"
            
            if(DefaultDeployEnvironment.trim().length()>0){
                envName =getEnvironmentName(defaultEnvironment)
                
                echo "comp_name : $comp_name"
                
                version_id="${DISTINGUISHER}${buildFileName}.${BUILD_NUMBER}.${CUR_DATE}"

                //create snapshot before deployment
                createSnapshot(envName, auth, ucdApplicationName, '', To, appName, stage_step)

                echo "calling deploy fun() in default env"
                appDeploy(comp_name, envName, earName, warName, folderName, applicationProcess, UCDProcess, buildFileName, auth)    //appDeploy - function in shared library for reusability
                
                //going to call smoke fun()
                smokeTest()
            }
            else{
                echo "No env provided as default"
                build_status="FAILURE"
            }
            
        }catch(Exception e){
            Subject="Build Failure : ${JOB_Name} #${BUILD_NUMBER}"  
            build_status="FAILURE"
            echo "${stage_step}"
            EmailFunction(To, CC, Subject, appName, stage_step, build_status, envName)
            error "Failed at 'Default Deployment(${envName})', exiting now..."
        }
    }
    
    //send success mail
    Subject="Build Success : ${JOB_Name} #${BUILD_NUMBER}" 
    echo "${stage_step}"
    EmailFunction(To, CC, Subject, appName, stage_step, build_status, envName)
    
    //directly pass map of stages to parallel
    if(DeployEnvironmentlist.trim().length()>0){
        echo "calling parallel deployment process"
        echo "receipient: $receipient"
        DeploymentApproval(receipient,appName,BUILD_URL)
        
        echo "deployment envs: ${DeployEnvironmentlist}"
        try{
            parallel getDeployStages(DeployEnvironmentlist.trim(), earName, warName, UCDProcess, To, CC, Subject, appName, build_status, version_id, Deploy_status, deployRegion, auth){
        }catch(Exception e){
            println(e)
        }finally{
            if (Deploy_status == "FAILURE"){
                currentBuild.result = "FAILURE"
                currentBuild.rawBuild.@result = husdon.model.Result.FAILURE
            }else if(Deploy_status == "ABORTED"){
                currentBuild.result = "FAILURE"
                currentBuild.rawBuild.@result = husdon.model.Result.SUCCESS
            }
        } 

        try{
            stage('Approval to trigger RTL Pipeline'){
                def envToDeployIntoPreprod =""
                CUR_DATE=sh(script:'(date +"%d-%m-%y")',returnStdout: true).trim()
                def buildArtifactId="${BUILD_NUMBER}.${CUR_DATE}"  //from Nexus get artifact Name
                def preProdEnv=""
                def anotherPreProdEnv=""
                
                approvalMap = input id: 'TriggerRTLPipeline', message: "Provide approval to trigger the RTL pipeline with build artifact: ${buildArtifactId}", ok: 'Deploy to Pre-Prod Environment', parameters: [choice(choices: ['PREPROD(RK4-FMO)', 'PREPROD(PB2-FMO)'], description: 'Select Pre-Prod Environment', name: 'envToDeployIntoPreprod')], submitter: 'GitOrgName*TeamName'
                println("approvalMap:" + approvalMap)
                
                println("Approved to deploy RTL")
                envToDeployIntoPreprod ="$approvalMap"
                println("envToDeployIntoPreprod : "+envToDeployIntoPreprod)
                
                if("${envToDeployIntoPreprod}" == "PREPROD(RK4-FMO)"){
                    anotherPreProdEnv="PREPROD(PB2-FMO)"
                }else if("${envToDeployIntoPreprod}" == "PREPROD(PB2-FMO)"){
                    anotherPreProdEnv="PREPROD(RK4-FMO)"
                }else{
                    echo "Wrong Pre-Prod Environment"
                }
                
                println("Another Pre-Prod Env: "+ anotherPreProdEnv)
                build job: 'JenkinsFolderName/JenkinsJobName', wait:false, parameters: [[$class: 'StringParameterValue',name:'preProdEnv',value:"$envToDeployIntoPreprod"],[$class: 'StringParameterValue',name:'Version',value:"$buildArtifactId"],[$class: 'StringParameterValue',name:'anotherPreProdEnv',value:"$anotherPreProdEnv"]]
            }
        }catch(Exception e){
            println(e)
        } 

        echo "All deployment over"
    }
    
}
